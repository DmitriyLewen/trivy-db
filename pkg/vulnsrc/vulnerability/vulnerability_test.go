package vulnerability

import (
	fixtures "github.com/aquasecurity/bolt-fixtures"
	"github.com/stretchr/testify/require"
	"os"
	"path/filepath"
	"testing"

	"github.com/aquasecurity/trivy-db/pkg/utils"

	"github.com/aquasecurity/trivy-db/pkg/db"

	"github.com/aquasecurity/trivy-db/pkg/types"
	"github.com/stretchr/testify/assert"
)

func TestGetDetails(t *testing.T) {
	testCases := []struct {
		name     string
		vulnID   string
		fixtures []string
		want     map[types.SourceID]types.VulnerabilityDetail
	}{
		{
			name:     "happy path",
			vulnID:   "CVE-2020-1234",
			fixtures: []string{"testdata/fixtures/happy.yaml"},
			want: map[types.SourceID]types.VulnerabilityDetail{
				NVD: {
					CvssScore:        4.2,
					CvssVector:       "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					CvssScoreV3:      5.6,
					CvssVectorV3:     "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					SeverityV3:       types.SeverityHigh,
					CweIDs:           []string{"CWE-125", "CWE-200"},
					LastModifiedDate: utils.MustTimeParse("2020-01-01T01:02:03Z"),
					PublishedDate:    utils.MustTimeParse("2001-01-01T01:02:03Z"),
				},
				RedHat: {
					CvssScoreV3:  6.7,
					CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					SeverityV3:   types.SeverityHigh,
					Title:        "test vulnerability",
					Description:  "a test vulnerability where vendor rates it lower than NVD",
					References:   []string{"http://foo-bar.com/baz"},
				},
			},
		},
		{
			name:     "no advisories are returned",
			fixtures: []string{"testdata/fixtures/happy.yaml"},
			vulnID:   "CVE-bad",
			want:     nil,
		},
		{
			name:     "GetVulnerabilityDetail returns an error",
			fixtures: []string{"testdata/fixtures/sad.yaml"},
			vulnID:   "CVE-2020-1234",
			want:     nil,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			dir := initDB(t, tc.fixtures)
			require.NoError(t, db.Init(dir))
			defer db.Close()

			v := New(db.Config{})
			got := v.GetDetails(tc.vulnID)

			assert.Equal(t, tc.want, got)
		})
	}
}

func TestIsRejected(t *testing.T) {
	testCases := []struct {
		name    string
		details map[types.SourceID]types.VulnerabilityDetail
		want    bool
	}{
		{
			name: "happy path",
			details: map[types.SourceID]types.VulnerabilityDetail{
				NVD: {
					ID:          "CVE-2020-1234",
					CvssScore:   9.1,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				RedHat: {
					ID:          "CVE-2020-1234",
					CvssScoreV3: 5.6,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
			},
			want: false,
		},
		{
			name: "happy path, when vulnerability from redhat and ubuntu is rejected by Nvd",
			details: map[types.SourceID]types.VulnerabilityDetail{
				RedHat: {
					ID:          "CVE-2020-1234",
					CvssScoreV3: 5.6,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				Ubuntu: {
					ID:          "CVE-2020-1234",
					CvssScore:   1.2,
					CvssScoreV3: 3.4,
					Severity:    types.SeverityLow,
					SeverityV3:  types.SeverityMedium,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				NVD: {
					ID:          "CVE-2020-1234",
					CvssScore:   9.1,
					Title:       "test vulnerability",
					Description: "** REJECT ** a test vulnerability where vendor rates it lower than NVD",
				},
			},
			want: true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := New(nil).IsRejected(tc.details)
			assert.Equal(t, tc.want, got)
		})
	}
}

func TestNormalize(t *testing.T) {
	testCases := []struct {
		name    string
		details map[types.SourceID]types.VulnerabilityDetail
		want    types.Vulnerability
	}{
		{
			name: "happy path",
			details: map[types.SourceID]types.VulnerabilityDetail{
				NVD: {
					CvssScore:        4.2,
					CvssVector:       "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					CvssScoreV3:      5.6,
					CvssVectorV3:     "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					SeverityV3:       types.SeverityMedium,
					CweIDs:           []string{"CWE-125", "CWE-200"},
					LastModifiedDate: utils.MustTimeParse("2020-01-01T01:02:03Z"),
					PublishedDate:    utils.MustTimeParse("2001-01-01T01:02:03Z"),
				},
				RedHat: {
					CvssScoreV3:  6.7,
					CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					SeverityV3:   types.SeverityHigh,
					Title:        "test vulnerability",
					Description:  "a test vulnerability where vendor rates it lower than NVD",
					References:   []string{"http://foo-bar.com/baz"},
				},
			},
			want: types.Vulnerability{
				Title:          "test vulnerability",
				Description:    "a test vulnerability where vendor rates it lower than NVD",
				Severity:       types.SeverityMedium.String(),
				VendorSeverity: types.VendorSeverity{"nvd": 2, "redhat": 3},
				CVSS: types.VendorCVSS{
					NVD: types.CVSS{
						V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3Vector: "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V2Score:  4.2,
						V3Score:  5.6,
					},
					RedHat: types.CVSS{
						V2Vector: "",
						V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V2Score:  0,
						V3Score:  6.7,
					},
				},
				CweIDs:           []string{"CWE-125", "CWE-200"},
				References:       []string{"http://foo-bar.com/baz"},
				LastModifiedDate: utils.MustTimeParse("2020-01-01T01:02:03Z"),
				PublishedDate:    utils.MustTimeParse("2001-01-01T01:02:03Z"),
			},
		},
		{
			name: "happy path, classifications for redhat, ubuntu and nodejs with variety of scores and vectors",
			details: map[types.SourceID]types.VulnerabilityDetail{
				RedHat: {
					ID:           "CVE-2020-1234",
					CvssScore:    4.2,
					CvssVector:   "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					CvssScoreV3:  5.6,
					CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					SeverityV3:   types.SeverityCritical,
					Title:        "test vulnerability",
					Description:  "a test vulnerability where vendor rates it lower than NVD",
					References:   []string{"http://foo-bar.com/baz"},
				},
				Ubuntu: {
					ID:           "CVE-2020-1234",
					CvssScoreV3:  3.4,
					CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					Severity:     types.SeverityLow,
					SeverityV3:   types.SeverityMedium,
					Title:        "test vulnerability",
					Description:  "a test vulnerability where vendor rates it lower than NVD",
				},
				NodejsSecurityWg: {
					ID:          "CVE-2020-1234",
					CvssScore:   -1,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
			},
			want: types.Vulnerability{
				Title:          "test vulnerability",
				Description:    "a test vulnerability where vendor rates it lower than NVD",
				Severity:       types.SeverityMedium.String(),
				VendorSeverity: types.VendorSeverity{"redhat": 4, "ubuntu": 2},
				CVSS: types.VendorCVSS{
					RedHat: types.CVSS{
						V2Vector: "AV:N/AC:M/Au:N/C:N/I:P/A:N",
						V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V2Score:  4.2,
						V3Score:  5.6,
					},
					Ubuntu: types.CVSS{
						V3Vector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
						V3Score:  3.4,
					},
				},
				References: []string{"http://foo-bar.com/baz"},
			},
		},
		{
			name: "happy path, classifications for redhat (only CVSSv3), ubuntu and nodejs with variety of scores but no vectors",
			details: map[types.SourceID]types.VulnerabilityDetail{
				RedHat: {
					ID:          "CVE-2020-1234",
					CvssScoreV3: 5.6,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				Ubuntu: {
					ID:          "CVE-2020-1234",
					CvssScore:   1.2,
					CvssScoreV3: 3.4,
					Severity:    types.SeverityLow,
					SeverityV3:  types.SeverityMedium,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				NodejsSecurityWg: {
					ID:          "CVE-2020-1234",
					CvssScore:   9.1,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
			},
			want: types.Vulnerability{
				Severity:       types.SeverityMedium.String(),
				VendorSeverity: types.VendorSeverity{"redhat": 2, "ubuntu": 2, "nodejs-security-wg": 4},
				CVSS:           types.VendorCVSS{},
				Title:          "test vulnerability",
				Description:    "a test vulnerability where vendor rates it lower than NVD",
			},
		},
		{
			name: "happy path, classifications for redhat (only CVSSv3), ubuntu and nodejs with variety vectors but no scores",
			details: map[types.SourceID]types.VulnerabilityDetail{
				RedHat: {
					ID:           "CVE-2020-1234",
					CvssVector:   "AV:N/AC:M/Au:N/C:N/I:P/A:N",
					CvssVectorV3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
					Title:        "test vulnerability",
					Description:  "a test vulnerability where vendor rates it lower than NVD",
				},
				Ubuntu: {
					ID:          "CVE-2020-1234",
					Severity:    types.SeverityLow,
					SeverityV3:  types.SeverityMedium,
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
				NodejsSecurityWg: {
					ID:          "CVE-2020-1234",
					Title:       "test vulnerability",
					Description: "a test vulnerability where vendor rates it lower than NVD",
				},
			},
			want: types.Vulnerability{
				Severity:       types.SeverityMedium.String(),
				VendorSeverity: types.VendorSeverity{"ubuntu": 2},
				CVSS:           types.VendorCVSS{},
				Title:          "test vulnerability",
				Description:    "a test vulnerability where vendor rates it lower than NVD",
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := New(nil).Normalize(tc.details)
			assert.Equal(t, tc.want, got)
		})
	}
}

func initDB(t *testing.T, fixtureFiles []string) string {
	// Create a temp dir
	dir := t.TempDir()

	dbPath := db.Path(dir)
	dbDir := filepath.Dir(dbPath)
	err := os.MkdirAll(dbDir, 0700)
	require.NoError(t, err)

	// Load testdata into BoltDB
	loader, err := fixtures.New(dbPath, fixtureFiles)
	require.NoError(t, err)
	require.NoError(t, loader.Load())
	require.NoError(t, loader.Close())

	return dir
}
